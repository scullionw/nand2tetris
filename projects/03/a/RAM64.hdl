// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
    RAM8(in=in ,load=dmuxa ,address=address[0..2] ,out=outram8a);
    RAM8(in=in ,load=dmuxb ,address=address[0..2] ,out=outram8b); 
    RAM8(in=in ,load=dmuxc ,address=address[0..2] ,out=outram8c);
    RAM8(in=in ,load=dmuxd ,address=address[0..2] ,out=outram8d);
    RAM8(in=in ,load=dmuxe ,address=address[0..2] ,out=outram8e);
    RAM8(in=in ,load=dmuxf ,address=address[0..2] ,out=outram8f); 
    RAM8(in=in ,load=dmuxg ,address=address[0..2] ,out=outram8g);
    RAM8(in=in ,load=dmuxh ,address=address[0..2] ,out=outram8h);
    DMux8Way(in=load ,sel=address[3..5] ,a=dmuxa ,b=dmuxb ,c=dmuxc ,d=dmuxd ,e=dmuxe ,f=dmuxf ,g=dmuxg ,h=dmuxh);
    Mux8Way16(a=outram8a ,b=outram8b ,c=outram8c ,d=outram8d ,e=outram8e ,f=outram8f ,g=outram8g ,h=outram8h ,sel=address[3..5] ,out=out);
}