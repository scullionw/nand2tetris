// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    Mux16(a=toareg ,b=instruction ,sel=adressing ,out=outmux1);
    Not(in=instruction[15], out=adressing);
    Or(a=instruction[5], b=adressing, out=writetoa);
    ARegister(in=outmux1 ,load=writetoa ,out=aregout, out[0..14]=addressM);
    Mux16(a=aregout ,b=inM ,sel=instruction[12] ,out=aluin2);
    //Write to D conditions
    And(a=instruction[4], b=instruction[15], out=writetod);
    DRegister(in=todreg ,load=writetod ,out=aluin1 );
    ALU(x=aluin1 ,y=aluin2 ,zx=instruction[11] ,nx=instruction[10] ,zy=instruction[9] ,ny=instruction[8] ,f=instruction[7] ,no=instruction[6] ,out=outM, out=toareg, out=todreg ,zr=zero ,ng=negative);
    PC(in=aregout ,load=shouldload ,inc=true ,reset=reset ,out[0..14]=pc );//maybe only inc if Not load
    And(a=instruction[3], b=instruction[15], out=writeM);

    // PC logic
    Not(in=negative, out=positive);
    Not(in=zero, out=notzero);
    And(a=notzero,b=positive,out=j3val);
    And(a=zero,b=true,out=j2val);
    And(a=notzero,b=negative,out=j1val);
    And(a=j3val,b=instruction[0],out=j3true);
    And(a=j2val,b=instruction[1],out=j2true);
    And(a=j1val,b=instruction[2],out=j1true);
    Or8Way(in[0..4]=false, in[5]=j1true, in[6]=j2true, in[7]=j3true ,out=jmp);
    And(a=jmp,b=instruction[15],out=shouldload);
}